//! Generated by build.rs::presets
#![allow(clippy::excessive_precision)]
use crate::sim::body::Body;
use keplerian_sim::Orbit;
use three_d::Srgba;

/// Returns Callisto, the outermost Galilean moon of Jupiter.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn callisto(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            7.16667402831101026800e-3,
            1.86947825204344010353e9,
            3.40534428477789544165e-2,
            5.60476429622655314411e-1,
            5.87653150113267219723e0,
            3.20478718554404062857e0,
            mu,
        )
    });

    Body {
        name: String::from("Callisto"),
        mass: 1.07593800000000002884e23,
        radius: 2.41030000000000000000e6,
        orbit,
        color: Srgba::new(42, 39, 32, 255),
    }
}
/// Returns 1 Ceres, a dwarf planet in the asteroid belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn ceres(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            7.95299343372980471756e-2,
            3.80842657108915222168e11,
            1.84792329175424985266e-1,
            1.27907856358446592182e0,
            1.40063516802071985623e0,
            3.83811268370889635548e0,
            mu,
        )
    });

    Body {
        name: String::from("Ceres"),
        mass: 9.38390000000000065536e20,
        radius: 4.69700000000000000000e5,
        orbit,
        color: Srgba::new(104, 88, 89, 128),
    }
}
/// Returns (134340) Pluto I, a.k.a. Charon, the largest moon orbiting Pluto.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn charon(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.60848696687389611367e-4,
            1.95926095070674605668e7,
            1.97026410480719049723e0,
            3.00765198825411461669e0,
            3.96875638111867834468e0,
            1.78841867088763017968e0,
            mu,
        )
    });

    Body {
        name: String::from("Charon"),
        mass: 1.58969999999999986893e21,
        radius: 6.06000000000000000000e5,
        orbit,
        color: Srgba::new(94, 86, 75, 255),
    }
}
/// Returns Deimos, the second moon of Mars.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn deimos(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.31331815481706587695e-4,
            2.34527808348858989775e7,
            4.22203828062914898744e-1,
            9.02184810280082460920e-1,
            1.41471308979495069558e0,
            1.78483588231838430360e0,
            mu,
        )
    });

    Body {
        name: String::from("Deimos"),
        mass: 1.51000000000000000000e15,
        radius: 6.27000000000000000000e3,
        orbit,
        color: Srgba::new(209, 199, 187, 255),
    }
}
/// Returns (136199) Eris I Dysnomia, the moon of the dwarf planet Eris.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn dysnomia(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            6.13671677758924338786e-3,
            3.70457319446747303009e7,
            1.07529174245378289498e0,
            2.70997434062580566660e0,
            2.42771471101362656952e0,
            5.41522005836052677807e0,
            mu,
        )
    });

    Body {
        name: String::from("Dysnomia"),
        mass: 8.20000000000000000000e19,
        radius: 3.07500000000000000000e5,
        orbit,
        color: Srgba::new(78, 75, 73, 255),
    }
}
/// Returns Earth, the third planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn earth(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.69383477558015596576e-2,
            1.47116234025380615234e11,
            5.42267793582903252694e-5,
            4.96966285450645450794e0,
            3.08964739086457562678e0,
            4.61837973661737599684e0,
            mu,
        )
    });

    Body {
        name: String::from("Earth"),
        mass: 5.97200000000000032716e24,
        radius: 6.37100000000000000000e6,
        orbit,
        color: Srgba::new(154, 218, 235, 255),
    }
}
/// Returns Enceladus, one of the most reflective bodies in the Solar system and a moon of Saturn.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn enceladus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.60396690833306428126e-3,
            2.37314199881740689278e8,
            4.89660127075389195461e-1,
            1.53468517605671128656e0,
            2.95870988405796975229e0,
            1.40782580882600250050e0,
            mu,
        )
    });

    Body {
        name: String::from("Enceladus"),
        mass: 1.08031800000000000000e20,
        radius: 2.52100000000000000000e5,
        orbit,
        color: Srgba::new(255, 255, 255, 255),
    }
}
/// Returns 136199 Eris, a dwarf planet, and a trans-Neptunian and scattered disc object.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn eris(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.36585871240458278653e-1,
            5.73256352052879003906e12,
            7.65391193713262474319e-1,
            2.63057210588123702166e0,
            6.28898462432163074531e-1,
            3.68870982740637121111e0,
            mu,
        )
    });

    Body {
        name: String::from("Eris"),
        mass: 1.64659999999999994757e22,
        radius: 1.16300000000000000000e6,
        orbit,
        color: Srgba::new(239, 238, 242, 80),
    }
}
/// Returns Europa, the second innermost Galilean moon of Jupiter.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn europa(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            9.02381988911849473867e-3,
            6.65273815619104862213e8,
            3.79427089439220571743e-2,
            2.54547637836387341537e0,
            5.68754681809757478561e0,
            3.86998727757317784182e0,
            mu,
        )
    });

    Body {
        name: String::from("Europa"),
        mass: 4.79984000000000020972e22,
        radius: 1.56080000000000000000e6,
        orbit,
        color: Srgba::new(217, 210, 191, 255),
    }
}
/// Returns Ganymede, the most massive and second outermost Galilean moon of Jupiter.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn ganymede(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.31764204345976613381e-3,
            1.06795732959960794449e9,
            4.07984714881025611888e-2,
            6.06971418931420814147e0,
            5.92187684391575697163e0,
            4.48782673296934486729e0,
            mu,
        )
    });

    Body {
        name: String::from("Ganymede"),
        mass: 1.48190000000000004719e23,
        radius: 2.63410000000000000000e6,
        orbit,
        color: Srgba::new(200, 188, 173, 255),
    }
}
/// Returns a geostationary satellite, located 42,164 km from the center of the parent body.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn geostationary_sat(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            0.00000000000000000000e0,
            4.21640000000000000000e7,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("Geostationary Satellite"),
        mass: 1.00000000000000000000e3,
        radius: 1.00000000000000000000e1,
        orbit,
        color: Srgba::new(255, 255, 255, 68),
    }
}
/// Returns 136108 Haumea, a dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn haumea(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.96156447340650602618e-1,
            5.16979504292481250000e12,
            4.92329168232650549175e-1,
            4.20502135370858987073e0,
            2.12586641878553272988e0,
            3.87640542681359523414e0,
            mu,
        )
    });

    Body {
        name: String::from("Haumea"),
        mass: 4.00000000000000000000e21,
        radius: 7.80000000000000000000e5,
        orbit,
        color: Srgba::new(190, 189, 192, 80),
    }
}
/// Returns Iapetus, the outermost of Saturn's large moons.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn iapetus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.96319726205827096988e-2,
            3.45809547349369621277e9,
            2.96814168748336548731e-1,
            4.04734370228587891916e0,
            2.42448273554624460502e0,
            4.98392695640728078388e-1,
            mu,
        )
    });

    Body {
        name: String::from("Iapetus"),
        mass: 1.80564999999999993446e21,
        radius: 7.34400000000000000000e5,
        orbit,
        color: Srgba::new(153, 149, 148, 255),
    }
}
/// Returns Io, the innermost Galilean moon of Jupiter.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn io(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.37081796565630918694e-3,
            4.20185097703661859035e8,
            3.83979064491655822100e-2,
            5.67159010804805152617e0,
            5.90678351064241269341e0,
            1.19377417068254043642e0,
            mu,
        )
    });

    Body {
        name: String::from("Io"),
        mass: 8.93193800000000019661e22,
        radius: 1.82160000000000000000e6,
        orbit,
        color: Srgba::new(252, 247, 133, 255),
    }
}
/// Returns Jupiter, the fifth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn jupiter(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.82893306343074174558e-2,
            7.40769821497715942383e11,
            2.27498742282045522678e-2,
            4.77616376735852554702e0,
            1.75436874102111461937e0,
            1.41979311786106965343e0,
            mu,
        )
    });

    Body {
        name: String::from("Jupiter"),
        mass: 1.89820000000000013061e27,
        radius: 6.99110000000000000000e7,
        orbit,
        color: Srgba::new(225, 214, 191, 255),
    }
}
/// Returns 541132 Leleākūhonua, a sednoid and extreme trans-Neptunian object.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn leleakuhonua(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            9.54053406574391527073e-1,
            9.68325437435939648438e12,
            2.03833860613798073524e-1,
            2.06135629445770218737e0,
            5.25570903767473218693e0,
            6.27691011804525711426e0,
            mu,
        )
    });

    Body {
        name: String::from("Leleākūhonua"),
        mass: 1.00000000000000000000e19,
        radius: 1.10000000000000000000e5,
        orbit,
        color: Srgba::new(128, 128, 128, 128),
    }
}
/// Returns the Moon, the only natural satellite of Earth.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn luna(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            6.40319437221805315419e-2,
            3.56739122426563858986e8,
            9.16609601822608727195e-2,
            1.15833369565504473719e0,
            6.07092155816451661821e0,
            3.42916122080155005847e0,
            mu,
        )
    });

    Body {
        name: String::from("Luna"),
        mass: 7.34199999999999968543e22,
        radius: 1.73710000000000000000e6,
        orbit,
        color: Srgba::new(161, 159, 157, 255),
    }
}
/// Returns 136472 Makemake, a dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn makemake(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.60874065948373612400e-1,
            5.71078091547620117188e12,
            5.06724308647890531176e-1,
            5.18458481360043865749e0,
            1.38341493889607369816e0,
            2.95258720441105992904e0,
            mu,
        )
    });

    Body {
        name: String::from("Makemake"),
        mass: 3.10000000000000000000e21,
        radius: 7.15000000000000000000e5,
        orbit,
        color: Srgba::new(209, 190, 185, 80),
    }
}
/// Returns Mars, the fourth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn mars(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            9.34946060124549616077e-2,
            2.06623101126235687256e11,
            3.22453838449871243999e-2,
            5.00291212505434312874e0,
            8.63654471965072612072e-1,
            4.63981684470795041619e0,
            mu,
        )
    });

    Body {
        name: String::from("Mars"),
        mass: 6.41710000000000034079e23,
        radius: 3.38950000000000000000e6,
        orbit,
        color: Srgba::new(250, 193, 146, 255),
    }
}
/// Returns Mercury, the closest planet to the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn mercury(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.05648713636657598514e-1,
            4.60000046227402343750e10,
            1.22233248642570638265e-1,
            5.09606186800686700167e-1,
            8.42976378186475527876e-1,
            2.22553246024303374995e0,
            mu,
        )
    });

    Body {
        name: String::from("Mercury"),
        mass: 3.30110000000000013107e23,
        radius: 2.43970000000000000000e6,
        orbit,
        color: Srgba::new(232, 231, 229, 255),
    }
}
/// Returns Mimas, the moon of Saturn that looks similar to a Death Star.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn mimas(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.83462216122805901741e-2,
            1.82599645631865382195e8,
            4.87034924461823615083e-1,
            2.77890128057910645865e0,
            3.01719064434245698436e0,
            1.91047141435486178551e0,
            mu,
        )
    });

    Body {
        name: String::from("Mimas"),
        mass: 3.75094000000000000000e19,
        radius: 1.98200000000000000000e5,
        orbit,
        color: Srgba::new(230, 230, 230, 255),
    }
}
/// Returns Neptune, the eighth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn neptune(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.14814309025696500294e-2,
            4.45617710000040429688e12,
            3.09706862100092468471e-2,
            4.77402171175526834901e0,
            2.30285670133151576522e0,
            5.51317397706606460162e0,
            mu,
        )
    });

    Body {
        name: String::from("Neptune"),
        mass: 1.02409000000000005039e26,
        radius: 2.43410000000000000000e7,
        orbit,
        color: Srgba::new(143, 172, 182, 255),
    }
}
/// Returns Nereid (Neptune II), the third-largest moon of Neptune.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn nereid(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            7.45021840445777683293e-1,
            1.40651351168943285942e9,
            8.71134868797276140651e-2,
            5.16716154887130496576e0,
            5.58501119359687248078e0,
            4.44642592189711205464e0,
            mu,
        )
    });

    Body {
        name: String::from("Nereid"),
        mass: 3.57000000000000000000e19,
        radius: 1.78500000000000000000e5,
        orbit,
        color: Srgba::new(67, 67, 67, 255),
    }
}
/// Returns New Horizons, an artificial satellite in escape trajectory from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn new_horizons(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.40881505215712299339e0,
            3.45060492712132568359e11,
            3.95257081908107835155e-2,
            5.08540266922221295687e0,
            3.95540979857510688333e0,
            9.21047022547655913627e0,
            mu,
        )
    });

    Body {
        name: String::from("New Horizons"),
        mass: 4.01000000000000000000e2,
        radius: 1.39999999999999991118e0,
        orbit,
        color: Srgba::new(255, 255, 68, 68),
    }
}
/// Returns Oberon, the second-largest moon of Uranus.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn oberon(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            7.58629735213554780987e-4,
            5.83017314520883321762e8,
            1.70877305513009503102e0,
            3.65745250277697886432e0,
            2.92709753589131560503e0,
            4.19348658600581281064e0,
            mu,
        )
    });

    Body {
        name: String::from("Oberon"),
        mass: 3.11040000000000000000e21,
        radius: 7.61400000000000000000e5,
        orbit,
        color: Srgba::new(165, 158, 150, 255),
    }
}
/// Returns Parker Solar Probe, an artificial satellite very close to the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn parker_solar_probe(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            8.81936963589643463379e-1,
            6.86153162883756828308e9,
            5.92583265653312679655e-2,
            1.19487350698406324945e0,
            1.33769473839334196441e0,
            8.41112960342036974914e-1,
            mu,
        )
    });

    Body {
        name: String::from("Parker Solar Probe"),
        mass: 5.55000000000000000000e2,
        radius: 1.50000000000000000000e0,
        orbit,
        color: Srgba::new(255, 255, 68, 68),
    }
}
/// Returns Phobos, the first moon of Mars.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn phobos(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.51654894388272201006e-2,
            9.23614115084801800549e6,
            4.84781992905496228463e-1,
            2.06065475058262981278e0,
            1.44030385343538669396e0,
            1.31150356728336703327e0,
            mu,
        )
    });

    Body {
        name: String::from("Phobos"),
        mass: 1.06000000000000000000e16,
        radius: 1.10800000000000000000e4,
        orbit,
        color: Srgba::new(203, 175, 161, 255),
    }
}
/// Returns Pioneer 10, an inactive artificial satellite in escape trajectory from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn pioneer_10(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.74993450376594394946e0,
            7.77258886462304809570e11,
            5.46493305484346686418e-2,
            6.04940308543776250616e0,
            5.80613088085351591872e0,
            1.78677740419062089927e1,
            mu,
        )
    });

    Body {
        name: String::from("Pioneer 10"),
        mass: 2.58000000000000000000e2,
        radius: 5.00000000000000000000e0,
        orbit,
        color: Srgba::new(255, 255, 255, 68),
    }
}
/// Returns Pioneer 11, an inactive artificial satellite in escape trajectory from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn pioneer_11(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.13372588035494503700e0,
            1.38082047847507299805e12,
            2.90552742676011666045e-1,
            2.20356460069437321003e-1,
            2.79664802379292121159e0,
            1.23966710442169372186e1,
            mu,
        )
    });

    Body {
        name: String::from("Pioneer 11"),
        mass: 2.58500000000000000000e2,
        radius: 5.00000000000000000000e0,
        orbit,
        color: Srgba::new(255, 255, 255, 68),
    }
}
/// Returns 134340 Pluto, a famous dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn pluto(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.48849528290483401616e-1,
            4.46570510141945410156e12,
            2.98876378403593101485e-1,
            2.01424734786533932152e0,
            1.92504174566190666695e0,
            8.88349436303251249747e-1,
            mu,
        )
    });

    Body {
        name: String::from("Pluto"),
        mass: 1.30249999999999997379e22,
        radius: 1.18830000000000000000e6,
        orbit,
        color: Srgba::new(160, 148, 134, 128),
    }
}
/// Returns Proteus (Neptune VIII), The second-largest moon of Neptune.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn proteus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.79062808324991890301e-4,
            1.17617091603409811854e8,
            5.07248600425865281416e-1,
            4.13230861198917664989e-1,
            8.50152592470351353704e-1,
            1.35374072438646830818e0,
            mu,
        )
    });

    Body {
        name: String::from("Proteus"),
        mass: 2.00000000000000000000e19,
        radius: 2.10000000000000000000e5,
        orbit,
        color: Srgba::new(46, 46, 46, 255),
    }
}
/// Returns 50000 Quaoar, a dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn quaoar(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            3.60517984128958107748e-2,
            6.22222463624155468750e12,
            1.39474953018200564792e-1,
            2.86246731654266195477e0,
            3.29826028877810761841e0,
            5.08276432412114154147e0,
            mu,
        )
    });

    Body {
        name: String::from("Quaoar"),
        mass: 1.20000000000000000000e21,
        radius: 5.45000000000000000000e5,
        orbit,
        color: Srgba::new(99, 87, 82, 80),
    }
}
/// Returns Saturn, the sixth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn saturn(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            5.54147065887688333730e-2,
            1.34903684169948706055e12,
            4.33951925129439294859e-2,
            5.90145873993467251495e0,
            1.98193372203291362510e0,
            4.76558411108678292578e0,
            mu,
        )
    });

    Body {
        name: String::from("Saturn"),
        mass: 5.68340000000000030526e26,
        radius: 5.82320000000000000000e7,
        orbit,
        color: Srgba::new(222, 187, 121, 255),
    }
}
/// Returns 90377 Sedna, a dwarf planet, sednoid, and extreme trans-Neptunian object.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn sedna(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            8.61585516986372534909e-1,
            1.14044409573967500000e13,
            2.08150429949461951429e-1,
            5.42774071409135316912e0,
            2.52145638289718698744e0,
            6.25890811267192148648e0,
            mu,
        )
    });

    Body {
        name: String::from("Sedna"),
        mass: 2.00000000000000000000e21,
        radius: 5.00000000000000000000e5,
        orbit,
        color: Srgba::new(159, 62, 45, 128),
    }
}
/// Returns Tethys, the fifth-largest moon of Saturn.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn tethys(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            8.50981428875338349362e-4,
            2.94727054824947774410e8,
            4.71725715004216228365e-1,
            2.36322519605822689570e0,
            2.97320040870304458380e0,
            6.23427711029640541085e0,
            mu,
        )
    });

    Body {
        name: String::from("Tethys"),
        mass: 6.17489999999999934464e20,
        radius: 5.31100000000000000000e5,
        orbit,
        color: Srgba::new(255, 255, 255, 255),
    }
}
/// Returns the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn the_sun(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            0.00000000000000000000e0,
            2.36518000000000000000e20,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("The Sun"),
        mass: 1.98899999999999990191e30,
        radius: 6.96340000000000000000e8,
        orbit,
        color: Srgba::new(255, 243, 234, 255),
    }
}
/// Returns Titan, the largest moon of Saturn.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn titan(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.88230819117409296781e-2,
            1.18672925091897511482e9,
            4.83626912018492838286e-1,
            3.10339406569376397016e0,
            2.95093284437445912971e0,
            1.87040029330365299362e-3,
            mu,
        )
    });

    Body {
        name: String::from("Titan"),
        mass: 1.34517999999999998427e23,
        radius: 2.57473000000000000000e6,
        orbit,
        color: Srgba::new(240, 223, 135, 255),
    }
}
/// Returns Titania, the largest moon of Uranus.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn titania(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.95260683894372889975e-3,
            4.35446256126845598221e8,
            1.70630053015844773689e0,
            3.93298849521925752981e0,
            2.92589946623306218498e0,
            4.71483672122259347970e-2,
            mu,
        )
    });

    Body {
        name: String::from("Titania"),
        mass: 3.45500000000000026214e21,
        radius: 7.88400000000000000000e5,
        orbit,
        color: Srgba::new(214, 201, 182, 255),
    }
}
/// Returns Triton, the largest moon of Neptune.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn triton(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            3.15822619284288468055e-5,
            3.54755342111145198345e8,
            2.25407604407659656331e0,
            5.34260205559912559892e0,
            3.88488660669656260538e0,
            4.12735531721081849721e-1,
            mu,
        )
    });

    Body {
        name: String::from("Triton"),
        mass: 2.13889999999999986893e22,
        radius: 1.35340000000000000000e6,
        orbit,
        color: Srgba::new(167, 167, 167, 255),
    }
}
/// Returns Uranus, the seventh planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn uranus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.65209793503596827358e-2,
            2.75143237150358105469e12,
            1.35054872989625353308e-2,
            1.58906948668356284848e0,
            1.29146272353440072500e0,
            4.51290712778646962988e0,
            mu,
        )
    });

    Body {
        name: String::from("Uranus"),
        mass: 8.68100000000000065054e25,
        radius: 2.53620000000000000000e7,
        orbit,
        color: Srgba::new(210, 235, 243, 255),
    }
}
/// Returns Venus, the second planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn venus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            6.78658356338367966393e-3,
            1.07474542715947113037e11,
            5.92434890407038672322e-2,
            9.56645943426456923930e-1,
            1.33704958736872492331e0,
            6.15151825197227264397e0,
            mu,
        )
    });

    Body {
        name: String::from("Venus"),
        mass: 4.86750000000000034918e24,
        radius: 6.05180000000000000000e6,
        orbit,
        color: Srgba::new(244, 230, 201, 255),
    }
}
/// Returns 4 Vesta, a large asteroid in the asteroid belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn vesta(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            9.01496634936013729877e-2,
            3.21429791435468017578e11,
            1.24687202523102808049e-1,
            2.64505285171600235117e0,
            1.80994678823166355031e0,
            2.10187172950634604263e-1,
            mu,
        )
    });

    Body {
        name: String::from("Vesta"),
        mass: 2.59027100000000016384e20,
        radius: 2.62700000000000000000e5,
        orbit,
        color: Srgba::new(133, 131, 119, 128),
    }
}
/// Returns Voyager 1, an artificial satellite in the interstellar medium.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn voyager_1(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            3.69327025404460984603e0,
            1.29620080774637597656e12,
            6.24738376229536096496e-1,
            5.89880248878253166112e0,
            3.12675254432706362095e0,
            4.98320618682255300769e1,
            mu,
        )
    });

    Body {
        name: String::from("Voyager 1"),
        mass: 7.21899999999999977263e2,
        radius: 4.00000000000000000000e0,
        orbit,
        color: Srgba::new(255, 255, 68, 68),
    }
}
/// Returns Voyager 2, an artificial satellite in the interstellar medium.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn voyager_2(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            6.28535834808048932132e0,
            3.18053846742993408203e12,
            1.37885420114126810986e0,
            2.26972678805437011462e0,
            1.77717369452539575292e0,
            3.30399819334499014190e1,
            mu,
        )
    });

    Body {
        name: String::from("Voyager 2"),
        mass: 7.21899999999999977263e2,
        radius: 4.00000000000000000000e0,
        orbit,
        color: Srgba::new(255, 255, 68, 68),
    }
}
/// Returns (50000) Quaoar I, a.k.a. Weywot, the moon of the dwarf planet Quaoar.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn weywot(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.52671569367301507292e-1,
            1.01020927765520382673e7,
            2.69343192146016541244e0,
            6.33603188861815547206e-1,
            5.77697372460318625542e0,
            6.02268083093493000746e0,
            mu,
        )
    });

    Body {
        name: String::from("Weywot"),
        mass: 7.12000000000000000000e18,
        radius: 1.00000000000000000000e5,
        orbit,
        color: Srgba::new(70, 70, 70, 255),
    }
}