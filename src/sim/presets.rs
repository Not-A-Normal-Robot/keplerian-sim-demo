//! Generated by build.rs::presets
#![allow(clippy::excessive_precision)]
use super::body::Body;
use keplerian_sim::Orbit;
use three_d::Srgba;

/// Returns 1 Ceres, a dwarf planet in the asteroid belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn ceres(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            7.85973397823458291844e-2,
            3.81000000000000000000e11,
            1.85004900711398939661e-1,
            1.28456232946782655802e0,
            1.40149938935144646734e0,
            5.08588944031147605074e0,
            mu,
        )
    });

    Body {
        name: String::from("Ceres"),
        mass: 9.38390000000000065536e20,
        radius: 4.69700000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns (134340) Pluto I, a.k.a. Charon, the largest moon orbiting Pluto.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn charon(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.61004176157450353685e-4,
            1.95926100000000000000e7,
            1.39626340159546371601e-3,
            0.00000000000000000000e0,
            3.89288708340327227475e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("Charon"),
        mass: 1.58969999999999986893e21,
        radius: 6.06000000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns (136199) Eris I Dysnomia, the moon of the dwarf planet Eris.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn dysnomia(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            6.19999999999999978212e-3,
            3.72730000000000000000e7,
            0.00000000000000000000e0,
            3.15607888638134648218e0,
            2.20208191724124580091e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("Dysnomia"),
        mass: 8.20000000000000000000e19,
        radius: 3.07500000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Earth, the third planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn earth(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.67085997630175911444e-2,
            1.47098450000000000000e11,
            8.72664625997164801332e-7,
            1.99330266505795550280e0,
            -1.96535243881774290831e-1,
            6.25904740362450517921e0,
            mu,
        )
    });

    Body {
        name: String::from("Earth"),
        mass: 5.97200000000000032716e24,
        radius: 6.37100000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns 136199 Eris, a dwarf planet, and a trans-Neptunian and scattered disc object.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn eris(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.36071710007880197768e-1,
            5.72500000000000000000e12,
            7.68643002578302758643e-1,
            2.64659982443168173560e0,
            6.27463319384481410523e-1,
            3.59518627289059944374e0,
            mu,
        )
    });

    Body {
        name: String::from("Eris"),
        mass: 1.64659999999999994757e22,
        radius: 1.16300000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns 136108 Haumea, a dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn haumea(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.96424833916016144952e-1,
            5.18310000000000000000e12,
            4.92421959169924150501e-1,
            4.17205249725976567987e0,
            2.13221638728391260642e0,
            3.80839569431422697576e0,
            mu,
        )
    });

    Body {
        name: String::from("Haumea"),
        mass: 4.00000000000000000000e21,
        radius: 7.80000000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Jupiter, the fifth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn jupiter(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.86641258145691785186e-2,
            7.40595000000000000000e11,
            2.27416401534861131739e-2,
            4.77988086255931055035e0,
            1.75342757972358320728e0,
            3.49414916249264795312e-1,
            mu,
        )
    });

    Body {
        name: String::from("Jupiter"),
        mass: 1.89820000000000013061e27,
        radius: 6.99110000000000000000e7,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns the Moon, the only natural satellite of Earth.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn luna(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            5.57291666666666699048e-2,
            3.62600000000000000000e8,
            8.97971900151082469410e-2,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("Luna"),
        mass: 7.34199999999999968543e22,
        radius: 1.73710000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns 136472 Makemake, a dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn makemake(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.61258046716939495990e-1,
            5.70030000000000000000e12,
            5.05857503751776516054e-1,
            5.14582404682496186155e0,
            1.38963115043788532077e0,
            2.88876425814589499197e0,
            mu,
        )
    });

    Body {
        name: String::from("Makemake"),
        mass: 3.10000000000000000000e21,
        radius: 7.15000000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Mars, the fourth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn mars(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            9.34634172020416265081e-2,
            2.06650000000000000000e11,
            3.22885911618950999236e-2,
            5.00036830696375389493e0,
            8.65308761331709419551e-1,
            3.38803314397139232472e-1,
            mu,
        )
    });

    Body {
        name: String::from("Mars"),
        mass: 6.41710000000000034079e23,
        radius: 3.38950000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Mercury, the closest planet to the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn mercury(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.05663961319288546292e-1,
            4.60000000000000000000e10,
            1.22260314102202782838e-1,
            5.08309691350828485312e-1,
            8.43535080781379509318e-1,
            3.05076571931600826204e0,
            mu,
        )
    });

    Body {
        name: String::from("Mercury"),
        mass: 3.30110000000000013107e23,
        radius: 2.43970000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Neptune, the eighth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn neptune(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            8.88888888888888888118e-3,
            4.46000000000000000000e12,
            3.08923277602996329549e-2,
            4.76801262364574895969e0,
            2.30004724815568728502e0,
            4.53581401996042288260e0,
            mu,
        )
    });

    Body {
        name: String::from("Neptune"),
        mass: 1.02409000000000005039e26,
        radius: 2.43410000000000000000e7,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns 134340 Pluto, a famous dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn pluto(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            2.48808279189858427838e-1,
            4.43682000000000000000e12,
            2.99498499642226967410e-1,
            1.98677810071522520374e0,
            1.92508071165722571827e0,
            2.53596340314776069746e-1,
            mu,
        )
    });

    Body {
        name: String::from("Pluto"),
        mass: 1.30249999999999997379e22,
        radius: 1.18830000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns 50000 Quaoar, a dwarf planet in the Kuiper belt.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn quaoar(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.10770289910502572894e-2,
            6.26800000000000000000e12,
            1.39443080588086965044e-1,
            2.57401158084123693470e0,
            3.29739819591532690168e0,
            5.25525619092500573259e0,
            mu,
        )
    });

    Body {
        name: String::from("Quaoar"),
        mass: 1.20000000000000000000e21,
        radius: 5.45000000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Saturn, the sixth planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn saturn(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            5.64866326014544575806e-2,
            1.35255000000000000000e12,
            4.33714319120590899304e-2,
            5.92350785492859444048e0,
            1.98382849427935470388e0,
            5.53304279467242299262e0,
            mu,
        )
    });

    Body {
        name: String::from("Saturn"),
        mass: 5.68340000000000030526e26,
        radius: 5.82320000000000000000e7,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns 90377 Sedna, a dwarf planet, sednoid, and extreme trans-Neptunian object.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn sedna(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            8.49405548216644601389e-1,
            1.14000000000000000000e13,
            2.08229997067687466750e-1,
            5.43411753266938468698e0,
            2.51760253941678024958e0,
            6.25032075736453318626e0,
            mu,
        )
    });

    Body {
        name: String::from("Sedna"),
        mass: 2.00000000000000000000e21,
        radius: 5.00000000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn the_sun(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            0.00000000000000000000e0,
            2.36518000000000000000e20,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("The Sun"),
        mass: 1.98899999999999990191e30,
        radius: 6.96340000000000000000e8,
        orbit,
        color: Srgba::new_opaque(255, 243, 234),
    }
}
/// Returns Uranus, the seventh planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn uranus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            4.71669032297390225517e-2,
            2.73556000000000000000e12,
            1.34913951179161679256e-2,
            1.69294942532114944811e0,
            1.29164836623092349477e0,
            2.48253189342720625987e0,
            mu,
        )
    });

    Body {
        name: String::from("Uranus"),
        mass: 8.68100000000000065054e25,
        radius: 2.53620000000000000000e7,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns Venus, the second planet from the Sun.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn venus(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            6.74614176138989014159e-3,
            1.07480000000000000000e11,
            5.92465977223491091497e-2,
            9.57906506664567780618e-1,
            1.33831847042925211611e0,
            8.74671754636958342921e-1,
            mu,
        )
    });

    Body {
        name: String::from("Venus"),
        mass: 4.86750000000000034918e24,
        radius: 6.05180000000000000000e6,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}
/// Returns (50000) Quaoar I, a.k.a. Weywot, the moon of the dwarf planet Quaoar.
///
/// `parent_mu`: The gravitational parameter of the parent body, if any.
/// If None, the celestial body will not be placed in an orbit.
pub(crate) fn weywot(parent_mu: Option<f64>) -> Body {
    let orbit = parent_mu.map(|mu| {
        Orbit::new(
            1.79999999999999986400e-2,
            1.32890000000000000000e7,
            0.00000000000000000000e0,
            5.09636141582344226464e0,
            6.22908010036776182972e0,
            0.00000000000000000000e0,
            mu,
        )
    });

    Body {
        name: String::from("Weywot"),
        mass: 7.12000000000000000000e18,
        radius: 1.00000000000000000000e5,
        orbit,
        color: Srgba::new_opaque(255, 255, 255),
    }
}